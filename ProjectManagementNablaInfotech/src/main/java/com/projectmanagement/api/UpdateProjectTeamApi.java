/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.25).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.projectmanagement.api;

import com.projectmanagement.model.ApiErrorResponse;
import com.projectmanagement.model.ApiResponseSuccessTeam;
import com.projectmanagement.model.ProjectTeamDetailsRequestBody;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-03-22T08:22:53.346Z[GMT]")
@Validated
public interface UpdateProjectTeamApi {

    @Operation(summary = "Update Existing team for project", description = "Use this API call for updating teams. All the details about the team has to be sent in request. Details of each member should be there. The Team id which uniquely identifies a team is used to update a team", security = {
        @SecurityRequirement(name = "OA2", scopes = {
                    })    }, tags={ "Project" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "status of Update Project team using team id", content = @Content(schema = @Schema(implementation = ApiResponseSuccessTeam.class))),
        
        @ApiResponse(responseCode = "400", description = "invalid request", content = @Content(schema = @Schema(implementation = ApiErrorResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "internal server error", content = @Content(schema = @Schema(implementation = ApiErrorResponse.class))) })
    @RequestMapping(value = "/updateProjectTeam/{teamID}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PATCH)
    ResponseEntity<ApiResponseSuccessTeam> updateProjectTeam(@Parameter(in = ParameterIn.PATH, description = "Unique Id for to identify every team", required=true, schema=@Schema()) @PathVariable("teamID") String teamID, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody ProjectTeamDetailsRequestBody body);

}

