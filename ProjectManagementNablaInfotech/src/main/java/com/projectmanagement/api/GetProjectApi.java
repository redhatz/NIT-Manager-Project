/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.25).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.projectmanagement.api;

import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.projectmanagement.model.ApiErrorResponse;
import com.projectmanagement.model.ApiResponseSuccessProject;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-03-22T08:22:53.346Z[GMT]")
@Validated
public interface GetProjectApi {

    @Operation(summary = "Get all the details about the project", description = "Allows user to get the details of the project from the Database. If  Project Id, Project name or status is present in the request then the details realated to that will returned in the response in JSON format. If Project Id, Project name or status is not present in the request then all the details is returned in response", security = {
        @SecurityRequirement(name = "OA2", scopes = {
                    })    }, tags={ "Project" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "get project details response", content = @Content(schema = @Schema(implementation = ApiResponseSuccessProject.class))),
        
        @ApiResponse(responseCode = "400", description = "invalid request response", content = @Content(schema = @Schema(implementation = ApiErrorResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "internal server error response", content = @Content(schema = @Schema(implementation = ApiErrorResponse.class))) })
    @RequestMapping(value = "/getProject",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ApiResponseSuccessProject> getProjectDetails(@Parameter(in = ParameterIn.QUERY, description = "unique id of the project." ,schema=@Schema()) @Valid @RequestParam(value = "projectID", required = false) String projectID, @Parameter(in = ParameterIn.QUERY, description = "Name of the project" ,schema=@Schema()) @Valid @RequestParam(value = "projectName", required = false) String projectName, @Parameter(in = ParameterIn.QUERY, description = "current status of the project" ,schema=@Schema()) @Valid @RequestParam(value = "status", required = false) String status, @Parameter(in = ParameterIn.QUERY, description = "An offset is simply the number of records you wish to skip before selecting records" ,schema=@Schema()) @Valid @RequestParam(value = "offset", required = false) Integer offset, @Parameter(in = ParameterIn.QUERY, description = "No of records to fetch" ,schema=@Schema()) @Valid @RequestParam(value = "limit", required = false) Integer limit);

}

