/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.25).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.projectmanagement.api;

import com.projectmanagement.model.ApiErrorResponse;
import com.projectmanagement.model.ApiResponseSuccessProject;
import com.projectmanagement.model.ProjectDetailsRequestBody;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-03-22T08:22:53.346Z[GMT]")
@Validated
public interface UpdateProjectDetailsApi {

    @Operation(summary = "Update details of Existing project in database", description = "This service end point takes the new details of the project and overwrite the details of existing project. There should a project alreday present in the database with the same id. All the details about the project has to be sent in request. ", security = {
        @SecurityRequirement(name = "OA2", scopes = {
                    })    }, tags={ "Project" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Update project details success response", content = @Content(schema = @Schema(implementation = ApiResponseSuccessProject.class))),
        
        @ApiResponse(responseCode = "400", description = "invalid request response", content = @Content(schema = @Schema(implementation = ApiErrorResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "internal server error response", content = @Content(schema = @Schema(implementation = ApiErrorResponse.class))) })
    @RequestMapping(value = "/updateProjectDetails/{projectId}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<ApiResponseSuccessProject> updateProjectDetails(@Parameter(in = ParameterIn.PATH, description = "Id of the project you want to update detials", required=true, schema=@Schema()) @PathVariable("projectId") String projectId, @Parameter(in = ParameterIn.DEFAULT, description = "Updated details of the project", required=true, schema=@Schema()) @Valid @RequestBody ProjectDetailsRequestBody body);

}

