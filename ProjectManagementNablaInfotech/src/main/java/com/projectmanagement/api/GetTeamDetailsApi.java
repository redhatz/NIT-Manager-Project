/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.25).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.projectmanagement.api;

import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.projectmanagement.model.ApiErrorResponse;
import com.projectmanagement.model.ApiResponseSuccessTeam;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-03-22T08:22:53.346Z[GMT]")
@Validated
public interface GetTeamDetailsApi {

    @Operation(summary = "Get all the details about the Team", description = "Allows user to get the details of the team from the Database. If  team Id is present in the request then the details related to that will be returned in the response in JSON format. If team Id is not present in the request then all the details will be returned in response", security = {
        @SecurityRequirement(name = "OA2", scopes = {
                    })    }, tags={ "Project" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "get team details success response", content = @Content(schema = @Schema(implementation = ApiResponseSuccessTeam.class))),
        
        @ApiResponse(responseCode = "400", description = "invalid request.", content = @Content(schema = @Schema(implementation = ApiErrorResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "internal server error", content = @Content(schema = @Schema(implementation = ApiErrorResponse.class))) })
    @RequestMapping(value = "/getTeamDetails",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ApiResponseSuccessTeam> getTeamDetails(@Parameter(in = ParameterIn.QUERY, description = "unique id of the Team." ,schema=@Schema()) @Valid @RequestParam(value = "teamID", required = false) String teamID, @Parameter(in = ParameterIn.QUERY, description = "An offset is simply the number of records you wish to skip before selecting records" ,schema=@Schema()) @Valid @RequestParam(value = "offset", required = false) int offset, @Parameter(in = ParameterIn.QUERY, description = "No of records to fetch" ,schema=@Schema()) @Valid @RequestParam(value = "limit", required = false) int limit);

}

